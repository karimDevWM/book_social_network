name: BSN Back-end API Pipeline

on:
    push: 
        branches: 
            - ci/pipeline
        paths: 
            - book-network/**
            - docker/backend/**
            - 'docker-compose.yml'
            - .github/workflows/*-backend.yml

jobs:
    compile:
        runs-on: ubuntu-latest
        name: Compile project
        steps:
            - name: Checkout code
              uses: actions/Checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup JDK
              uses: actions/setup-java@v4
              with:
                  java-version: 21
                  distribution: 'corretto'
            
            - name: Compile project
              run: |
                cd book-network
                ./mvnw clean compile
    
    unit-tests:
        runs-on: self-hosted
        name: Unit tests
        steps:
            - name: Checkout code
              uses: actions/Checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup JDK
              uses: actions/setup-java@v4
              with:
                  java-version: 21
                  distribution: 'corretto'
            
            - name: Running init tests
              run: |
                cd book-network
                ./mvnw clean test
    
    build:
        runs-on: self-hosted
        name: build backend
        needs: [compile, unit-tests]
        steps:
            - name: Checkout code
              uses: actions/Checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup JDK
              uses: actions/setup-java@v4
              with:
                  java-version: 21
                  distribution: 'corretto'
            
            - name: Build project
              run: |
                cd book-network
                ./mvnw clean package
    
    build-image:
            name: Build Docker image
            runs-on: self-hosted
            needs: [build]
            steps:
                - name: Checkout code
                  uses: actions/Checkout@v4
                  with:
                    fetch-depth: 0

                - name: Setup JDK
                  uses: actions/setup-java@v4
                  with:
                    java-version: 21
                    distribution: 'corretto'
                
                - name: Extract project version
                  id: extract_version
                  run: |
                    cd book-network
                    echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB[OUTPUT]
                
                - name: Login to GHCR
                  uses: docker/login-action@v1
                  with:
                    username: ${{github.actor}}
                    password: ${{secrets.GITHUB_TOKEN}}
                
                - name: 'Build Inventory Image'
                  uses: docker/build-push-action@v5
                  with:
                    context: book-network
                    file: docker/backend/Dockerfile
                    push: true
                    platforms: linux/amd64
                    tags: ${{ github.actor }}/bsn-api:${{ steps.extract_version.outputs.VERSION }},${{ github.actor }}/bsn-api:latest
                    build-args: |
                      PROFILE=dev
                      APP_version=${{ steps.extract_version.outputs.VERSION }}
      
    deploy:
      name: Deploy Backend
      runs-on: self-hosted
      needs: [build-image]
      steps:
        - name: Create deployment folder
          run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ci-cd"
        
        - name: Copy docker-compose file
          run: scp docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:ci-cd/docker-compose.yml

        - name: Set environment variables and deploy
          run: |
            ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<EOF
            export EMAIL_HOSTNAME=${{ secrets.EMAIL_HOSTNAME }} 
            export EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
            export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
            cd ci-cd
            docker-compose -f dock-compose.yml pull -q
            docker-compose -f dock-compose.yml up -d
            EOF